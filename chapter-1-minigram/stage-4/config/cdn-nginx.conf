events {
    worker_connections 2048;
    use epoll;
    multi_accept on;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # CDN-optimized logging
    log_format cdn_log '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" '
                      'cache_status:$upstream_cache_status '
                      'request_time:$request_time '
                      'bytes_sent:$body_bytes_sent '
                      'hit_ratio:N/A';

    access_log /var/log/nginx/cdn_access.log cdn_log;
    error_log /var/log/nginx/cdn_error.log warn;

    # Performance optimizations for CDN
    sendfile on;
    sendfile_max_chunk 1m;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 75;
    keepalive_requests 100;
    
    # File descriptor caching
    open_file_cache max=1000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;

    # Aggressive gzip compression for CDN
    gzip on;
    gzip_vary on;
    gzip_min_length 1000;
    gzip_comp_level 6;
    gzip_proxied any;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        text/json
        application/javascript
        application/json
        application/xml
        application/xml+rss
        application/font-woff
        application/font-woff2
        image/svg+xml
        image/x-icon;

    # Brotli compression (if available)
    # brotli on;
    # brotli_comp_level 6;
    # brotli_types text/plain text/css application/javascript;

    # Rate limiting for CDN
    limit_req_zone $binary_remote_addr zone=cdn:10m rate=100r/s;
    limit_conn_zone $binary_remote_addr zone=cdn_conn:10m;

    # CDN Server Configuration
    server {
        listen 80;
        server_name cdn.localhost;
        root /usr/share/nginx/html;

        # Security headers for CDN
        add_header X-Frame-Options SAMEORIGIN;
        add_header X-Content-Type-Options nosniff;
        add_header X-CDN-Server "MiniGram-CDN-v1.0";
        add_header X-Cache-Status "HIT" always;

        # Rate limiting
        limit_req zone=cdn burst=200 nodelay;
        limit_conn cdn_conn 50;

        # Health check for CDN
        location /health {
            access_log off;
            return 200 '{"status":"healthy","service":"cdn","timestamp":"$time_iso8601"}';
            add_header Content-Type application/json;
        }

        # CSS files with long-term caching
        location ~* \.css$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header Vary "Accept-Encoding";
            
            # CORS headers for cross-origin requests
            add_header Access-Control-Allow-Origin "*";
            add_header Access-Control-Allow-Methods "GET, HEAD, OPTIONS";
            
            # Optimal headers for CSS
            add_header X-Content-Type-Options nosniff;
            
            try_files $uri =404;
        }

        # JavaScript files with long-term caching
        location ~* \.js$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header Vary "Accept-Encoding";
            
            # CORS headers
            add_header Access-Control-Allow-Origin "*";
            add_header Access-Control-Allow-Methods "GET, HEAD, OPTIONS";
            
            try_files $uri =404;
        }

        # Images with optimized caching
        location ~* \.(png|jpg|jpeg|gif|webp|avif)$ {
            expires 6M;
            add_header Cache-Control "public, immutable";
            add_header Vary "Accept-Encoding";
            
            # Image optimization headers
            add_header X-Image-Optimized "true";
            
            # CORS for images
            add_header Access-Control-Allow-Origin "*";
            
            try_files $uri =404;
        }

        # SVG files
        location ~* \.svg$ {
            expires 1M;
            add_header Cache-Control "public";
            add_header Vary "Accept-Encoding";
            add_header Content-Type "image/svg+xml";
            
            # CORS for SVG
            add_header Access-Control-Allow-Origin "*";
            
            try_files $uri =404;
        }

        # Font files with very long caching
        location ~* \.(woff|woff2|ttf|eot|otf)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header Vary "Accept-Encoding";
            
            # CORS for fonts (required for cross-origin font loading)
            add_header Access-Control-Allow-Origin "*";
            add_header Access-Control-Allow-Methods "GET, HEAD, OPTIONS";
            
            try_files $uri =404;
        }

        # Video files
        location ~* \.(mp4|webm|ogg|avi|mov)$ {
            expires 1M;
            add_header Cache-Control "public";
            
            # Enable range requests for video streaming
            add_header Accept-Ranges bytes;
            
            # CORS for videos
            add_header Access-Control-Allow-Origin "*";
            
            try_files $uri =404;
        }

        # Archive files
        location ~* \.(zip|tar|gz|rar|7z)$ {
            expires 1M;
            add_header Cache-Control "public";
            add_header Content-Disposition "attachment";
            
            try_files $uri =404;
        }

        # Generic static files
        location ~* \.(ico|pdf|doc|docx|txt)$ {
            expires 1w;
            add_header Cache-Control "public";
            
            try_files $uri =404;
        }

        # Default location for any other files
        location / {
            # Basic caching for HTML and other files
            expires 1h;
            add_header Cache-Control "public";
            add_header Vary "Accept-Encoding";
            
            # Security headers
            add_header X-Frame-Options SAMEORIGIN;
            add_header X-Content-Type-Options nosniff;
            
            try_files $uri $uri/ =404;
        }

        # Handle preflight requests
        location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin "*";
                add_header Access-Control-Allow-Methods "GET, HEAD, OPTIONS";
                add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization, Cache-Control";
                add_header Access-Control-Max-Age 1728000;
                add_header Content-Type "text/plain; charset=utf-8";
                add_header Content-Length 0;
                return 204;
            }
        }

        # Error pages
        error_page 404 /404.html;
        location = /404.html {
            internal;
            return 404 '{"error":"File not found","code":404,"timestamp":"$time_iso8601"}';
            add_header Content-Type application/json;
        }

        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            internal;
            return 500 '{"error":"CDN server error","code":500,"timestamp":"$time_iso8601"}';
            add_header Content-Type application/json;
        }
    }

    # CDN Metrics and Status Server
    server {
        listen 8080;
        server_name cdn.localhost;

        # CDN status endpoint
        location /status {
            access_log off;
            allow 127.0.0.1;
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            deny all;
            
            default_type application/json;
            return 200 '{
                "service": "cdn",
                "status": "healthy",
                "version": "1.0",
                "cache_enabled": true,
                "compression": ["gzip"],
                "timestamp": "$time_iso8601",
                "uptime": "$nginx_version"
            }';
        }

        # NGINX status for CDN monitoring
        location /nginx_status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            deny all;
        }

        # Cache statistics (mock endpoint)
        location /cache_stats {
            access_log off;
            allow 127.0.0.1;
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            deny all;
            
            default_type application/json;
            return 200 '{
                "cache_hit_ratio": 0.85,
                "total_requests": 1000000,
                "cache_hits": 850000,
                "cache_misses": 150000,
                "bandwidth_saved": "500GB",
                "timestamp": "$time_iso8601"
            }';
        }
    }
}